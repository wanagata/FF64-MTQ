
F479_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003498  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003664  08003664  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800366c  0800366c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800366c  0800366c  0001366c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000002cc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d8  200002d8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000117c4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e40  00000000  00000000  00031800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00033640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001008  00000000  00000000  000346e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029309  00000000  00000000  000356f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013493  00000000  00000000  0005e9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8d93  00000000  00000000  00071e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016ac1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004804  00000000  00000000  0016ac70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08003634 	.word	0x08003634

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000010 	.word	0x20000010
 80001f0:	08003634 	.word	0x08003634

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fe34 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f816 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 faa0 	bl	8000a48 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000508:	f000 f87e 	bl	8000608 <MX_I2C1_Init>
  MX_I2C2_Init();
 800050c:	f000 f8aa 	bl	8000664 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000510:	f000 f8d6 	bl	80006c0 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000514:	f000 f938 	bl	8000788 <MX_TIM1_Init>
  MX_UART4_Init();
 8000518:	f000 f9ee 	bl	80008f8 <MX_UART4_Init>
  MX_UART5_Init();
 800051c:	f000 fa16 	bl	800094c <MX_UART5_Init>
  MX_UART7_Init();
 8000520:	f000 fa3e 	bl	80009a0 <MX_UART7_Init>
  MX_USART3_UART_Init();
 8000524:	f000 fa66 	bl	80009f4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000528:	f000 f8f8 	bl	800071c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x34>
	...

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	2234      	movs	r2, #52	; 0x34
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 f870 	bl	8003624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0308 	add.w	r3, r7, #8
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b29      	ldr	r3, [pc, #164]	; (8000600 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a28      	ldr	r2, [pc, #160]	; (8000600 <SystemClock_Config+0xd0>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <SystemClock_Config+0xd0>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000570:	2300      	movs	r3, #0
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <SystemClock_Config+0xd4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xd4>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xd4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80005a8:	235a      	movs	r3, #90	; 0x5a
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 031c 	add.w	r3, r7, #28
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fc53 	bl	8001e68 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c8:	f000 fab8 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	2102      	movs	r1, #2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fa1f 	bl	8001a2c <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005f4:	f000 faa2 	bl	8000b3c <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_I2C1_Init+0x50>)
 800060e:	4a13      	ldr	r2, [pc, #76]	; (800065c <MX_I2C1_Init+0x54>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_I2C1_Init+0x50>)
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <MX_I2C1_Init+0x58>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_I2C1_Init+0x50>)
 8000626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_I2C1_Init+0x50>)
 8000646:	f001 f8ad 	bl	80017a4 <HAL_I2C_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 fa74 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000028 	.word	0x20000028
 800065c:	40005400 	.word	0x40005400
 8000660:	000186a0 	.word	0x000186a0

08000664 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2C2_Init+0x50>)
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <MX_I2C2_Init+0x54>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_I2C2_Init+0x50>)
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_I2C2_Init+0x58>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_I2C2_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_I2C2_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_I2C2_Init+0x50>)
 8000682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000686:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_I2C2_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_I2C2_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_I2C2_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_I2C2_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_I2C2_Init+0x50>)
 80006a2:	f001 f87f 	bl	80017a4 <HAL_I2C_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 fa46 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000007c 	.word	0x2000007c
 80006b8:	40005800 	.word	0x40005800
 80006bc:	000186a0 	.word	0x000186a0

080006c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C3_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_I2C3_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C3_Init+0x50>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_I2C3_Init+0x58>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C3_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_I2C3_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_I2C3_Init+0x50>)
 80006de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_I2C3_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_I2C3_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_I2C3_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_I2C3_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_I2C3_Init+0x50>)
 80006fe:	f001 f851 	bl	80017a4 <HAL_I2C_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000708:	f000 fa18 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000d0 	.word	0x200000d0
 8000714:	40005c00 	.word	0x40005c00
 8000718:	000186a0 	.word	0x000186a0

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_SPI1_Init+0x64>)
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <MX_SPI1_Init+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI1_Init+0x64>)
 8000768:	220a      	movs	r2, #10
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_SPI1_Init+0x64>)
 800076e:	f001 fdff 	bl	8002370 <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f9e0 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000124 	.word	0x20000124
 8000784:	40013000 	.word	0x40013000

08000788 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b096      	sub	sp, #88	; 0x58
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2220      	movs	r2, #32
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 ff2f 	bl	8003624 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c6:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007c8:	4a4a      	ldr	r2, [pc, #296]	; (80008f4 <MX_TIM1_Init+0x16c>)
 80007ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007cc:	4b48      	ldr	r3, [pc, #288]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b47      	ldr	r3, [pc, #284]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007d8:	4b45      	ldr	r3, [pc, #276]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e6:	4b42      	ldr	r3, [pc, #264]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ec:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f2:	483f      	ldr	r0, [pc, #252]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007f4:	f001 fe45 	bl	8002482 <HAL_TIM_Base_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007fe:	f000 f99d 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000808:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800080c:	4619      	mov	r1, r3
 800080e:	4838      	ldr	r0, [pc, #224]	; (80008f0 <MX_TIM1_Init+0x168>)
 8000810:	f001 ffa2 	bl	8002758 <HAL_TIM_ConfigClockSource>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800081a:	f000 f98f 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800081e:	4834      	ldr	r0, [pc, #208]	; (80008f0 <MX_TIM1_Init+0x168>)
 8000820:	f001 fe7e 	bl	8002520 <HAL_TIM_PWM_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800082a:	f000 f987 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000836:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800083a:	4619      	mov	r1, r3
 800083c:	482c      	ldr	r0, [pc, #176]	; (80008f0 <MX_TIM1_Init+0x168>)
 800083e:	f002 fb3d 	bl	8002ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000848:	f000 f978 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084c:	2360      	movs	r3, #96	; 0x60
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000858:	2300      	movs	r3, #0
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	2200      	movs	r2, #0
 800086e:	4619      	mov	r1, r3
 8000870:	481f      	ldr	r0, [pc, #124]	; (80008f0 <MX_TIM1_Init+0x168>)
 8000872:	f001 feaf 	bl	80025d4 <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800087c:	f000 f95e 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	2204      	movs	r2, #4
 8000886:	4619      	mov	r1, r3
 8000888:	4819      	ldr	r0, [pc, #100]	; (80008f0 <MX_TIM1_Init+0x168>)
 800088a:	f001 fea3 	bl	80025d4 <HAL_TIM_PWM_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000894:	f000 f952 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	2208      	movs	r2, #8
 800089e:	4619      	mov	r1, r3
 80008a0:	4813      	ldr	r0, [pc, #76]	; (80008f0 <MX_TIM1_Init+0x168>)
 80008a2:	f001 fe97 	bl	80025d4 <HAL_TIM_PWM_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80008ac:	f000 f946 	bl	8000b3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM1_Init+0x168>)
 80008d4:	f002 fb6e 	bl	8002fb4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80008de:	f000 f92d 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM1_Init+0x168>)
 80008e4:	f000 fa96 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 80008e8:	bf00      	nop
 80008ea:	3758      	adds	r7, #88	; 0x58
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000017c 	.word	0x2000017c
 80008f4:	40010000 	.word	0x40010000

080008f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_UART4_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_UART4_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_UART4_Init+0x4c>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_UART4_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_UART4_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_UART4_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_UART4_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_UART4_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_UART4_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_UART4_Init+0x4c>)
 8000930:	f002 fb92 	bl	8003058 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f8ff 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200001c4 	.word	0x200001c4
 8000948:	40004c00 	.word	0x40004c00

0800094c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_UART5_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_UART5_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_UART5_Init+0x4c>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_UART5_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_UART5_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_UART5_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_UART5_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_UART5_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_UART5_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_UART5_Init+0x4c>)
 8000984:	f002 fb68 	bl	8003058 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800098e:	f000 f8d5 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000208 	.word	0x20000208
 800099c:	40005000 	.word	0x40005000

080009a0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_UART7_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_UART7_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_UART7_Init+0x4c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_UART7_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_UART7_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_UART7_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_UART7_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_UART7_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_UART7_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_UART7_Init+0x4c>)
 80009d8:	f002 fb3e 	bl	8003058 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80009e2:	f000 f8ab 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000024c 	.word	0x2000024c
 80009f0:	40007800 	.word	0x40007800

080009f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_USART3_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a2c:	f002 fb14 	bl	8003058 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 f881 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000290 	.word	0x20000290
 8000a44:	40004800 	.word	0x40004800

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a33      	ldr	r2, [pc, #204]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a2c      	ldr	r2, [pc, #176]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a25      	ldr	r2, [pc, #148]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a1e      	ldr	r2, [pc, #120]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000abc:	f043 0310 	orr.w	r3, r3, #16
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0310 	and.w	r3, r3, #16
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2101      	movs	r1, #1
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <MX_GPIO_Init+0xf0>)
 8000b0c:	f000 fe30 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_GPIO_Init+0xf0>)
 8000b28:	f000 fc76 	bl	8001418 <HAL_GPIO_Init>

}
 8000b2c:	bf00      	nop
 8000b2e:	3730      	adds	r7, #48	; 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08e      	sub	sp, #56	; 0x38
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a5b      	ldr	r2, [pc, #364]	; (8000d24 <HAL_I2C_MspInit+0x18c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d12c      	bne.n	8000c14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
 8000bbe:	4b5a      	ldr	r3, [pc, #360]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a59      	ldr	r2, [pc, #356]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b57      	ldr	r3, [pc, #348]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd6:	23c0      	movs	r3, #192	; 0xc0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bda:	2312      	movs	r3, #18
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be6:	2304      	movs	r3, #4
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	484e      	ldr	r0, [pc, #312]	; (8000d2c <HAL_I2C_MspInit+0x194>)
 8000bf2:	f000 fc11 	bl	8001418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	4b4b      	ldr	r3, [pc, #300]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a4a      	ldr	r2, [pc, #296]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b48      	ldr	r3, [pc, #288]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0e:	61fb      	str	r3, [r7, #28]
 8000c10:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000c12:	e083      	b.n	8000d1c <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a45      	ldr	r2, [pc, #276]	; (8000d30 <HAL_I2C_MspInit+0x198>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12d      	bne.n	8000c7a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	4b41      	ldr	r3, [pc, #260]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a40      	ldr	r2, [pc, #256]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b3e      	ldr	r3, [pc, #248]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c40:	2312      	movs	r3, #18
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4835      	ldr	r0, [pc, #212]	; (8000d2c <HAL_I2C_MspInit+0x194>)
 8000c58:	f000 fbde 	bl	8001418 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a30      	ldr	r2, [pc, #192]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000c66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
}
 8000c78:	e050      	b.n	8000d1c <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a2d      	ldr	r2, [pc, #180]	; (8000d34 <HAL_I2C_MspInit+0x19c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d14b      	bne.n	8000d1c <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc2:	2312      	movs	r3, #18
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4817      	ldr	r0, [pc, #92]	; (8000d38 <HAL_I2C_MspInit+0x1a0>)
 8000cda:	f000 fb9d 	bl	8001418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce4:	2312      	movs	r3, #18
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4810      	ldr	r0, [pc, #64]	; (8000d3c <HAL_I2C_MspInit+0x1a4>)
 8000cfc:	f000 fb8c 	bl	8001418 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000d0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_I2C_MspInit+0x190>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
}
 8000d1c:	bf00      	nop
 8000d1e:	3738      	adds	r7, #56	; 0x38
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40005400 	.word	0x40005400
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020400 	.word	0x40020400
 8000d30:	40005800 	.word	0x40005800
 8000d34:	40005c00 	.word	0x40005c00
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020000 	.word	0x40020000

08000d40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_SPI_MspInit+0x84>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d12b      	bne.n	8000dba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_SPI_MspInit+0x88>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_SPI_MspInit+0x88>)
 8000d6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_SPI_MspInit+0x88>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_SPI_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_SPI_MspInit+0x88>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_SPI_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d9a:	23e0      	movs	r3, #224	; 0xe0
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000daa:	2305      	movs	r3, #5
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_SPI_MspInit+0x8c>)
 8000db6:	f000 fb2f 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40013000 	.word	0x40013000
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <HAL_TIM_Base_MspInit+0x3c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10d      	bne.n	8000dfe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_TIM_Base_MspInit+0x40>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <HAL_TIM_Base_MspInit+0x40>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <HAL_TIM_Base_MspInit+0x40>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <HAL_TIM_MspPostInit+0x68>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d11e      	bne.n	8000e74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_TIM_MspPostInit+0x6c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_TIM_MspPostInit+0x6c>)
 8000e40:	f043 0310 	orr.w	r3, r3, #16
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_TIM_MspPostInit+0x6c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8000e52:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000e56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_TIM_MspPostInit+0x70>)
 8000e70:	f000 fad2 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b090      	sub	sp, #64	; 0x40
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a74      	ldr	r2, [pc, #464]	; (8001078 <HAL_UART_MspInit+0x1f0>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d12c      	bne.n	8000f04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eae:	4b73      	ldr	r3, [pc, #460]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a72      	ldr	r2, [pc, #456]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b70      	ldr	r3, [pc, #448]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eca:	4b6c      	ldr	r3, [pc, #432]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a6b      	ldr	r2, [pc, #428]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b69      	ldr	r3, [pc, #420]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efa:	4619      	mov	r1, r3
 8000efc:	4860      	ldr	r0, [pc, #384]	; (8001080 <HAL_UART_MspInit+0x1f8>)
 8000efe:	f000 fa8b 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f02:	e0b5      	b.n	8001070 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==UART5)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a5e      	ldr	r2, [pc, #376]	; (8001084 <HAL_UART_MspInit+0x1fc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d14b      	bne.n	8000fa6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
 8000f12:	4b5a      	ldr	r3, [pc, #360]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a59      	ldr	r2, [pc, #356]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b57      	ldr	r3, [pc, #348]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f26:	623b      	str	r3, [r7, #32]
 8000f28:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	4b53      	ldr	r3, [pc, #332]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a52      	ldr	r2, [pc, #328]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b50      	ldr	r3, [pc, #320]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	4b4c      	ldr	r3, [pc, #304]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a4b      	ldr	r2, [pc, #300]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b49      	ldr	r3, [pc, #292]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f74:	2308      	movs	r3, #8
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4842      	ldr	r0, [pc, #264]	; (8001088 <HAL_UART_MspInit+0x200>)
 8000f80:	f000 fa4a 	bl	8001418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f84:	2304      	movs	r3, #4
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f94:	2308      	movs	r3, #8
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	483b      	ldr	r0, [pc, #236]	; (800108c <HAL_UART_MspInit+0x204>)
 8000fa0:	f000 fa3a 	bl	8001418 <HAL_GPIO_Init>
}
 8000fa4:	e064      	b.n	8001070 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==UART7)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a39      	ldr	r2, [pc, #228]	; (8001090 <HAL_UART_MspInit+0x208>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d12d      	bne.n	800100c <HAL_UART_MspInit+0x184>
    __HAL_RCC_UART7_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	4b31      	ldr	r3, [pc, #196]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a30      	ldr	r2, [pc, #192]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000fba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a29      	ldr	r2, [pc, #164]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000fe8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001002:	4619      	mov	r1, r3
 8001004:	4823      	ldr	r0, [pc, #140]	; (8001094 <HAL_UART_MspInit+0x20c>)
 8001006:	f000 fa07 	bl	8001418 <HAL_GPIO_Init>
}
 800100a:	e031      	b.n	8001070 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <HAL_UART_MspInit+0x210>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12c      	bne.n	8001070 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_UART_MspInit+0x1f4>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a17      	ldr	r2, [pc, #92]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8001020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_UART_MspInit+0x1f4>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_UART_MspInit+0x1f4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800104e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001060:	2307      	movs	r3, #7
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001068:	4619      	mov	r1, r3
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <HAL_UART_MspInit+0x204>)
 800106c:	f000 f9d4 	bl	8001418 <HAL_GPIO_Init>
}
 8001070:	bf00      	nop
 8001072:	3740      	adds	r7, #64	; 0x40
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40004c00 	.word	0x40004c00
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000
 8001084:	40005000 	.word	0x40005000
 8001088:	40020800 	.word	0x40020800
 800108c:	40020c00 	.word	0x40020c00
 8001090:	40007800 	.word	0x40007800
 8001094:	40021000 	.word	0x40021000
 8001098:	40004800 	.word	0x40004800

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x4>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e8:	f000 f890 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800114c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111a:	490e      	ldr	r1, [pc, #56]	; (8001154 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001130:	4c0b      	ldr	r4, [pc, #44]	; (8001160 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113e:	f7ff ffd7 	bl	80010f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f002 fa4b 	bl	80035dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001146:	f7ff f9d7 	bl	80004f8 <main>
  bx  lr    
 800114a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800114c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001158:	08003674 	.word	0x08003674
  ldr r2, =_sbss
 800115c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001160:	200002d8 	.word	0x200002d8

08001164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC_IRQHandler>
	...

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <HAL_Init+0x40>)
 8001172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <HAL_Init+0x40>)
 800117e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_Init+0x40>)
 800118a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f90d 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	200f      	movs	r0, #15
 8001198:	f000 f808 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff fcd4 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023c00 	.word	0x40023c00

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_InitTick+0x54>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f917 	bl	80013fe <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00e      	b.n	80011f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d80a      	bhi.n	80011f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f000 f8ed 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <HAL_InitTick+0x5c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	20000008 	.word	0x20000008
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008
 8001230:	200002d4 	.word	0x200002d4

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200002d4 	.word	0x200002d4

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff47 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff5c 	bl	8001294 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffb0 	bl	800136c <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e177      	b.n	8001724 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8166 	bne.w	800171e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80c0 	beq.w	800171e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b66      	ldr	r3, [pc, #408]	; (800173c <HAL_GPIO_Init+0x324>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a65      	ldr	r2, [pc, #404]	; (800173c <HAL_GPIO_Init+0x324>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b63      	ldr	r3, [pc, #396]	; (800173c <HAL_GPIO_Init+0x324>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a61      	ldr	r2, [pc, #388]	; (8001740 <HAL_GPIO_Init+0x328>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a58      	ldr	r2, [pc, #352]	; (8001744 <HAL_GPIO_Init+0x32c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d037      	beq.n	8001656 <HAL_GPIO_Init+0x23e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a57      	ldr	r2, [pc, #348]	; (8001748 <HAL_GPIO_Init+0x330>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d031      	beq.n	8001652 <HAL_GPIO_Init+0x23a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a56      	ldr	r2, [pc, #344]	; (800174c <HAL_GPIO_Init+0x334>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d02b      	beq.n	800164e <HAL_GPIO_Init+0x236>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a55      	ldr	r2, [pc, #340]	; (8001750 <HAL_GPIO_Init+0x338>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d025      	beq.n	800164a <HAL_GPIO_Init+0x232>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a54      	ldr	r2, [pc, #336]	; (8001754 <HAL_GPIO_Init+0x33c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d01f      	beq.n	8001646 <HAL_GPIO_Init+0x22e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a53      	ldr	r2, [pc, #332]	; (8001758 <HAL_GPIO_Init+0x340>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d019      	beq.n	8001642 <HAL_GPIO_Init+0x22a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a52      	ldr	r2, [pc, #328]	; (800175c <HAL_GPIO_Init+0x344>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0x226>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a51      	ldr	r2, [pc, #324]	; (8001760 <HAL_GPIO_Init+0x348>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x222>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a50      	ldr	r2, [pc, #320]	; (8001764 <HAL_GPIO_Init+0x34c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x21e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4f      	ldr	r2, [pc, #316]	; (8001768 <HAL_GPIO_Init+0x350>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x21a>
 800162e:	2309      	movs	r3, #9
 8001630:	e012      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001632:	230a      	movs	r3, #10
 8001634:	e010      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001636:	2308      	movs	r3, #8
 8001638:	e00e      	b.n	8001658 <HAL_GPIO_Init+0x240>
 800163a:	2307      	movs	r3, #7
 800163c:	e00c      	b.n	8001658 <HAL_GPIO_Init+0x240>
 800163e:	2306      	movs	r3, #6
 8001640:	e00a      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001642:	2305      	movs	r3, #5
 8001644:	e008      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001646:	2304      	movs	r3, #4
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x240>
 800164a:	2303      	movs	r3, #3
 800164c:	e004      	b.n	8001658 <HAL_GPIO_Init+0x240>
 800164e:	2302      	movs	r3, #2
 8001650:	e002      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001656:	2300      	movs	r3, #0
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	f002 0203 	and.w	r2, r2, #3
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	4093      	lsls	r3, r2
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001668:	4935      	ldr	r1, [pc, #212]	; (8001740 <HAL_GPIO_Init+0x328>)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_GPIO_Init+0x354>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800169a:	4a34      	ldr	r2, [pc, #208]	; (800176c <HAL_GPIO_Init+0x354>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <HAL_GPIO_Init+0x354>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c4:	4a29      	ldr	r2, [pc, #164]	; (800176c <HAL_GPIO_Init+0x354>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <HAL_GPIO_Init+0x354>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ee:	4a1f      	ldr	r2, [pc, #124]	; (800176c <HAL_GPIO_Init+0x354>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_GPIO_Init+0x354>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <HAL_GPIO_Init+0x354>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3301      	adds	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	f67f ae84 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40013800 	.word	0x40013800
 8001744:	40020000 	.word	0x40020000
 8001748:	40020400 	.word	0x40020400
 800174c:	40020800 	.word	0x40020800
 8001750:	40020c00 	.word	0x40020c00
 8001754:	40021000 	.word	0x40021000
 8001758:	40021400 	.word	0x40021400
 800175c:	40021800 	.word	0x40021800
 8001760:	40021c00 	.word	0x40021c00
 8001764:	40022000 	.word	0x40022000
 8001768:	40022400 	.word	0x40022400
 800176c:	40013c00 	.word	0x40013c00

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800178c:	e003      	b.n	8001796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	041a      	lsls	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e12b      	b.n	8001a0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff f9e4 	bl	8000b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2224      	movs	r2, #36	; 0x24
 80017d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001806:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001808:	f000 fb06 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 800180c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4a81      	ldr	r2, [pc, #516]	; (8001a18 <HAL_I2C_Init+0x274>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d807      	bhi.n	8001828 <HAL_I2C_Init+0x84>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4a80      	ldr	r2, [pc, #512]	; (8001a1c <HAL_I2C_Init+0x278>)
 800181c:	4293      	cmp	r3, r2
 800181e:	bf94      	ite	ls
 8001820:	2301      	movls	r3, #1
 8001822:	2300      	movhi	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	e006      	b.n	8001836 <HAL_I2C_Init+0x92>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a7d      	ldr	r2, [pc, #500]	; (8001a20 <HAL_I2C_Init+0x27c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	bf94      	ite	ls
 8001830:	2301      	movls	r3, #1
 8001832:	2300      	movhi	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0e7      	b.n	8001a0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4a78      	ldr	r2, [pc, #480]	; (8001a24 <HAL_I2C_Init+0x280>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0c9b      	lsrs	r3, r3, #18
 8001848:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	430a      	orrs	r2, r1
 800185c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a6a      	ldr	r2, [pc, #424]	; (8001a18 <HAL_I2C_Init+0x274>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d802      	bhi.n	8001878 <HAL_I2C_Init+0xd4>
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	3301      	adds	r3, #1
 8001876:	e009      	b.n	800188c <HAL_I2C_Init+0xe8>
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	4a69      	ldr	r2, [pc, #420]	; (8001a28 <HAL_I2C_Init+0x284>)
 8001884:	fba2 2303 	umull	r2, r3, r2, r3
 8001888:	099b      	lsrs	r3, r3, #6
 800188a:	3301      	adds	r3, #1
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	430b      	orrs	r3, r1
 8001892:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800189e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	495c      	ldr	r1, [pc, #368]	; (8001a18 <HAL_I2C_Init+0x274>)
 80018a8:	428b      	cmp	r3, r1
 80018aa:	d819      	bhi.n	80018e0 <HAL_I2C_Init+0x13c>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1e59      	subs	r1, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ba:	1c59      	adds	r1, r3, #1
 80018bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018c0:	400b      	ands	r3, r1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00a      	beq.n	80018dc <HAL_I2C_Init+0x138>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1e59      	subs	r1, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018da:	e051      	b.n	8001980 <HAL_I2C_Init+0x1dc>
 80018dc:	2304      	movs	r3, #4
 80018de:	e04f      	b.n	8001980 <HAL_I2C_Init+0x1dc>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d111      	bne.n	800190c <HAL_I2C_Init+0x168>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e58      	subs	r0, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	440b      	add	r3, r1
 80018f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018fa:	3301      	adds	r3, #1
 80018fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf0c      	ite	eq
 8001904:	2301      	moveq	r3, #1
 8001906:	2300      	movne	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	e012      	b.n	8001932 <HAL_I2C_Init+0x18e>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1e58      	subs	r0, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	0099      	lsls	r1, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001922:	3301      	adds	r3, #1
 8001924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_Init+0x196>
 8001936:	2301      	movs	r3, #1
 8001938:	e022      	b.n	8001980 <HAL_I2C_Init+0x1dc>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10e      	bne.n	8001960 <HAL_I2C_Init+0x1bc>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1e58      	subs	r0, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6859      	ldr	r1, [r3, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	440b      	add	r3, r1
 8001950:	fbb0 f3f3 	udiv	r3, r0, r3
 8001954:	3301      	adds	r3, #1
 8001956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800195e:	e00f      	b.n	8001980 <HAL_I2C_Init+0x1dc>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1e58      	subs	r0, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	0099      	lsls	r1, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	fbb0 f3f3 	udiv	r3, r0, r3
 8001976:	3301      	adds	r3, #1
 8001978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	6809      	ldr	r1, [r1, #0]
 8001984:	4313      	orrs	r3, r2
 8001986:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69da      	ldr	r2, [r3, #28]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6911      	ldr	r1, [r2, #16]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68d2      	ldr	r2, [r2, #12]
 80019ba:	4311      	orrs	r1, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	430b      	orrs	r3, r1
 80019c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2220      	movs	r2, #32
 80019fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	000186a0 	.word	0x000186a0
 8001a1c:	001e847f 	.word	0x001e847f
 8001a20:	003d08ff 	.word	0x003d08ff
 8001a24:	431bde83 	.word	0x431bde83
 8001a28:	10624dd3 	.word	0x10624dd3

08001a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0cc      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b68      	ldr	r3, [pc, #416]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d90c      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b65      	ldr	r3, [pc, #404]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0b8      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	4b59      	ldr	r3, [pc, #356]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa4:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	494d      	ldr	r1, [pc, #308]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d044      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d119      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e07f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d003      	beq.n	8001aea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e06f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e067      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 0203 	bic.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4934      	ldr	r1, [pc, #208]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b1c:	f7ff fb8a 	bl	8001234 <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7ff fb86 	bl	8001234 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e04f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 020c 	and.w	r2, r3, #12
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d1eb      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d20c      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e032      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4916      	ldr	r1, [pc, #88]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	490e      	ldr	r1, [pc, #56]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bb2:	f000 f821 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	490a      	ldr	r1, [pc, #40]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff faea 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00
 8001be8:	40023800 	.word	0x40023800
 8001bec:	0800364c 	.word	0x0800364c
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bfc:	b094      	sub	sp, #80	; 0x50
 8001bfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	647b      	str	r3, [r7, #68]	; 0x44
 8001c04:	2300      	movs	r3, #0
 8001c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c08:	2300      	movs	r3, #0
 8001c0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c10:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d00d      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x40>
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	f200 80e1 	bhi.w	8001de4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x34>
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c2a:	e0db      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b73      	ldr	r3, [pc, #460]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c30:	e0db      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c32:	4b72      	ldr	r3, [pc, #456]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001c34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c36:	e0d8      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c38:	4b6f      	ldr	r3, [pc, #444]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c42:	4b6d      	ldr	r3, [pc, #436]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d063      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4e:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	099b      	lsrs	r3, r3, #6
 8001c54:	2200      	movs	r2, #0
 8001c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
 8001c66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	f04f 0000 	mov.w	r0, #0
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	0159      	lsls	r1, r3, #5
 8001c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c7c:	0150      	lsls	r0, r2, #5
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4621      	mov	r1, r4
 8001c84:	1a51      	subs	r1, r2, r1
 8001c86:	6139      	str	r1, [r7, #16]
 8001c88:	4629      	mov	r1, r5
 8001c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c9c:	4659      	mov	r1, fp
 8001c9e:	018b      	lsls	r3, r1, #6
 8001ca0:	4651      	mov	r1, sl
 8001ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca6:	4651      	mov	r1, sl
 8001ca8:	018a      	lsls	r2, r1, #6
 8001caa:	4651      	mov	r1, sl
 8001cac:	ebb2 0801 	subs.w	r8, r2, r1
 8001cb0:	4659      	mov	r1, fp
 8001cb2:	eb63 0901 	sbc.w	r9, r3, r1
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cca:	4690      	mov	r8, r2
 8001ccc:	4699      	mov	r9, r3
 8001cce:	4623      	mov	r3, r4
 8001cd0:	eb18 0303 	adds.w	r3, r8, r3
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	462b      	mov	r3, r5
 8001cd8:	eb49 0303 	adc.w	r3, r9, r3
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cea:	4629      	mov	r1, r5
 8001cec:	028b      	lsls	r3, r1, #10
 8001cee:	4621      	mov	r1, r4
 8001cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	028a      	lsls	r2, r1, #10
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfe:	2200      	movs	r2, #0
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d08:	f7fe fa74 	bl	80001f4 <__aeabi_uldivmod>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4613      	mov	r3, r2
 8001d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d14:	e058      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d16:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	099b      	lsrs	r3, r3, #6
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4611      	mov	r1, r2
 8001d22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d30:	4642      	mov	r2, r8
 8001d32:	464b      	mov	r3, r9
 8001d34:	f04f 0000 	mov.w	r0, #0
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	0159      	lsls	r1, r3, #5
 8001d3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d42:	0150      	lsls	r0, r2, #5
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4641      	mov	r1, r8
 8001d4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d4e:	4649      	mov	r1, r9
 8001d50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d68:	ebb2 040a 	subs.w	r4, r2, sl
 8001d6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	00eb      	lsls	r3, r5, #3
 8001d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d7e:	00e2      	lsls	r2, r4, #3
 8001d80:	4614      	mov	r4, r2
 8001d82:	461d      	mov	r5, r3
 8001d84:	4643      	mov	r3, r8
 8001d86:	18e3      	adds	r3, r4, r3
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	464b      	mov	r3, r9
 8001d8c:	eb45 0303 	adc.w	r3, r5, r3
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d9e:	4629      	mov	r1, r5
 8001da0:	028b      	lsls	r3, r1, #10
 8001da2:	4621      	mov	r1, r4
 8001da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da8:	4621      	mov	r1, r4
 8001daa:	028a      	lsls	r2, r1, #10
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db2:	2200      	movs	r2, #0
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	61fa      	str	r2, [r7, #28]
 8001db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dbc:	f7fe fa1a 	bl	80001f4 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001de2:	e002      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3750      	adds	r7, #80	; 0x50
 8001df0:	46bd      	mov	sp, r7
 8001df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	00f42400 	.word	0x00f42400

08001e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e1c:	f7ff fff0 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0a9b      	lsrs	r3, r3, #10
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	0800365c 	.word	0x0800365c

08001e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e44:	f7ff ffdc 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	0b5b      	lsrs	r3, r3, #13
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4903      	ldr	r1, [pc, #12]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	0800365c 	.word	0x0800365c

08001e68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e273      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d075      	beq.n	8001f72 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e86:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d00c      	beq.n	8001eac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e92:	4b85      	ldr	r3, [pc, #532]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d112      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	4b7e      	ldr	r3, [pc, #504]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d05b      	beq.n	8001f70 <HAL_RCC_OscConfig+0x108>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d157      	bne.n	8001f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e24e      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ecc:	d106      	bne.n	8001edc <HAL_RCC_OscConfig+0x74>
 8001ece:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a75      	ldr	r2, [pc, #468]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e01d      	b.n	8001f18 <HAL_RCC_OscConfig+0xb0>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x98>
 8001ee6:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6f      	ldr	r2, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6c      	ldr	r2, [pc, #432]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0xb0>
 8001f00:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a68      	ldr	r2, [pc, #416]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a65      	ldr	r2, [pc, #404]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7ff f988 	bl	8001234 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff f984 	bl	8001234 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e213      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0xc0>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff f974 	bl	8001234 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff f970 	bl	8001234 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1ff      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0xe8>
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d063      	beq.n	8002046 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f7e:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00b      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d11c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f96:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d116      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_RCC_OscConfig+0x152>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e1d3      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4937      	ldr	r1, [pc, #220]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	e03a      	b.n	8002046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd8:	4b34      	ldr	r3, [pc, #208]	; (80020ac <HAL_RCC_OscConfig+0x244>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7ff f929 	bl	8001234 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7ff f925 	bl	8001234 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1b4      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4925      	ldr	r1, [pc, #148]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e015      	b.n	8002046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_OscConfig+0x244>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff f908 	bl	8001234 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002028:	f7ff f904 	bl	8001234 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e193      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d036      	beq.n	80020c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d016      	beq.n	8002088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_RCC_OscConfig+0x248>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002060:	f7ff f8e8 	bl	8001234 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002068:	f7ff f8e4 	bl	8001234 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e173      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 800207c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x200>
 8002086:	e01b      	b.n	80020c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_OscConfig+0x248>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7ff f8d1 	bl	8001234 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	e00e      	b.n	80020b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002096:	f7ff f8cd 	bl	8001234 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d907      	bls.n	80020b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e15c      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
 80020a8:	40023800 	.word	0x40023800
 80020ac:	42470000 	.word	0x42470000
 80020b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	4b8a      	ldr	r3, [pc, #552]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 80020b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ea      	bne.n	8002096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8097 	beq.w	80021fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d2:	4b83      	ldr	r3, [pc, #524]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10f      	bne.n	80020fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b7f      	ldr	r3, [pc, #508]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a7e      	ldr	r2, [pc, #504]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b7c      	ldr	r3, [pc, #496]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fe:	4b79      	ldr	r3, [pc, #484]	; (80022e4 <HAL_RCC_OscConfig+0x47c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d118      	bne.n	800213c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210a:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <HAL_RCC_OscConfig+0x47c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a75      	ldr	r2, [pc, #468]	; (80022e4 <HAL_RCC_OscConfig+0x47c>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002116:	f7ff f88d 	bl	8001234 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211e:	f7ff f889 	bl	8001234 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e118      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	4b6c      	ldr	r3, [pc, #432]	; (80022e4 <HAL_RCC_OscConfig+0x47c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x2ea>
 8002144:	4b66      	ldr	r3, [pc, #408]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4a65      	ldr	r2, [pc, #404]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6713      	str	r3, [r2, #112]	; 0x70
 8002150:	e01c      	b.n	800218c <HAL_RCC_OscConfig+0x324>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b05      	cmp	r3, #5
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x30c>
 800215a:	4b61      	ldr	r3, [pc, #388]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a60      	ldr	r2, [pc, #384]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6713      	str	r3, [r2, #112]	; 0x70
 8002166:	4b5e      	ldr	r3, [pc, #376]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a5d      	ldr	r2, [pc, #372]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6713      	str	r3, [r2, #112]	; 0x70
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0x324>
 8002174:	4b5a      	ldr	r3, [pc, #360]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a59      	ldr	r2, [pc, #356]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	4b57      	ldr	r3, [pc, #348]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	4a56      	ldr	r2, [pc, #344]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 8002186:	f023 0304 	bic.w	r3, r3, #4
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d015      	beq.n	80021c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff f84e 	bl	8001234 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff f84a 	bl	8001234 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0d7      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b2:	4b4b      	ldr	r3, [pc, #300]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0ee      	beq.n	800219c <HAL_RCC_OscConfig+0x334>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7ff f838 	bl	8001234 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c6:	e00a      	b.n	80021de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7ff f834 	bl	8001234 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e0c1      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021de:	4b40      	ldr	r3, [pc, #256]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1ee      	bne.n	80021c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d105      	bne.n	80021fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f0:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	4a3a      	ldr	r2, [pc, #232]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 80021f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80ad 	beq.w	8002360 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002206:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b08      	cmp	r3, #8
 8002210:	d060      	beq.n	80022d4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d145      	bne.n	80022a6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_RCC_OscConfig+0x480>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7ff f808 	bl	8001234 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002228:	f7ff f804 	bl	8001234 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e093      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	019b      	lsls	r3, r3, #6
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	3b01      	subs	r3, #1
 8002260:	041b      	lsls	r3, r3, #16
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	071b      	lsls	r3, r3, #28
 8002272:	491b      	ldr	r1, [pc, #108]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_RCC_OscConfig+0x480>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7fe ffd9 	bl	8001234 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002286:	f7fe ffd5 	bl	8001234 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e064      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x41e>
 80022a4:	e05c      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_RCC_OscConfig+0x480>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe ffc2 	bl	8001234 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe ffbe 	bl	8001234 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e04d      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x44c>
 80022d2:	e045      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d107      	bne.n	80022ec <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e040      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40007000 	.word	0x40007000
 80022e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_RCC_OscConfig+0x504>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d030      	beq.n	800235c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d129      	bne.n	800235c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d122      	bne.n	800235c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800231c:	4013      	ands	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002324:	4293      	cmp	r3, r2
 8002326:	d119      	bne.n	800235c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	3b01      	subs	r3, #1
 8002336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d10f      	bne.n	800235c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e07b      	b.n	800247a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d108      	bne.n	800239c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002392:	d009      	beq.n	80023a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
 800239a:	e005      	b.n	80023a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe fcbc 	bl	8000d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242c:	ea42 0103 	orr.w	r1, r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	f003 0104 	and.w	r1, r3, #4
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	f003 0210 	and.w	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002468:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e041      	b.n	8002518 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d106      	bne.n	80024ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7fe fc91 	bl	8000dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3304      	adds	r3, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f000 fa11 	bl	80028e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e041      	b.n	80025b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f839 	bl	80025be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f000 f9c2 	bl	80028e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e0ae      	b.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b0c      	cmp	r3, #12
 80025fe:	f200 809f 	bhi.w	8002740 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002602:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	0800263d 	.word	0x0800263d
 800260c:	08002741 	.word	0x08002741
 8002610:	08002741 	.word	0x08002741
 8002614:	08002741 	.word	0x08002741
 8002618:	0800267d 	.word	0x0800267d
 800261c:	08002741 	.word	0x08002741
 8002620:	08002741 	.word	0x08002741
 8002624:	08002741 	.word	0x08002741
 8002628:	080026bf 	.word	0x080026bf
 800262c:	08002741 	.word	0x08002741
 8002630:	08002741 	.word	0x08002741
 8002634:	08002741 	.word	0x08002741
 8002638:	080026ff 	.word	0x080026ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f9f0 	bl	8002a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0208 	orr.w	r2, r2, #8
 8002656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0204 	bic.w	r2, r2, #4
 8002666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6999      	ldr	r1, [r3, #24]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	619a      	str	r2, [r3, #24]
      break;
 800267a:	e064      	b.n	8002746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fa40 	bl	8002b08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699a      	ldr	r2, [r3, #24]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6999      	ldr	r1, [r3, #24]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	021a      	lsls	r2, r3, #8
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	619a      	str	r2, [r3, #24]
      break;
 80026bc:	e043      	b.n	8002746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fa95 	bl	8002bf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69da      	ldr	r2, [r3, #28]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0208 	orr.w	r2, r2, #8
 80026d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0204 	bic.w	r2, r2, #4
 80026e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69d9      	ldr	r1, [r3, #28]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	61da      	str	r2, [r3, #28]
      break;
 80026fc:	e023      	b.n	8002746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fae9 	bl	8002cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69d9      	ldr	r1, [r3, #28]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	021a      	lsls	r2, r3, #8
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	61da      	str	r2, [r3, #28]
      break;
 800273e:	e002      	b.n	8002746 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	75fb      	strb	r3, [r7, #23]
      break;
 8002744:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800274e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_TIM_ConfigClockSource+0x1c>
 8002770:	2302      	movs	r3, #2
 8002772:	e0b4      	b.n	80028de <HAL_TIM_ConfigClockSource+0x186>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800279a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ac:	d03e      	beq.n	800282c <HAL_TIM_ConfigClockSource+0xd4>
 80027ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b2:	f200 8087 	bhi.w	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ba:	f000 8086 	beq.w	80028ca <HAL_TIM_ConfigClockSource+0x172>
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	d87f      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b70      	cmp	r3, #112	; 0x70
 80027c6:	d01a      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0xa6>
 80027c8:	2b70      	cmp	r3, #112	; 0x70
 80027ca:	d87b      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b60      	cmp	r3, #96	; 0x60
 80027ce:	d050      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0x11a>
 80027d0:	2b60      	cmp	r3, #96	; 0x60
 80027d2:	d877      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b50      	cmp	r3, #80	; 0x50
 80027d6:	d03c      	beq.n	8002852 <HAL_TIM_ConfigClockSource+0xfa>
 80027d8:	2b50      	cmp	r3, #80	; 0x50
 80027da:	d873      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b40      	cmp	r3, #64	; 0x40
 80027de:	d058      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x13a>
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d86f      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027e4:	2b30      	cmp	r3, #48	; 0x30
 80027e6:	d064      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x15a>
 80027e8:	2b30      	cmp	r3, #48	; 0x30
 80027ea:	d86b      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d060      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x15a>
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d867      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d05c      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x15a>
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d05a      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x15a>
 80027fc:	e062      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6899      	ldr	r1, [r3, #8]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f000 fb35 	bl	8002e7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	609a      	str	r2, [r3, #8]
      break;
 800282a:	e04f      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6899      	ldr	r1, [r3, #8]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f000 fb1e 	bl	8002e7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800284e:	609a      	str	r2, [r3, #8]
      break;
 8002850:	e03c      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	f000 fa92 	bl	8002d88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2150      	movs	r1, #80	; 0x50
 800286a:	4618      	mov	r0, r3
 800286c:	f000 faeb 	bl	8002e46 <TIM_ITRx_SetConfig>
      break;
 8002870:	e02c      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	461a      	mov	r2, r3
 8002880:	f000 fab1 	bl	8002de6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2160      	movs	r1, #96	; 0x60
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fadb 	bl	8002e46 <TIM_ITRx_SetConfig>
      break;
 8002890:	e01c      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	461a      	mov	r2, r3
 80028a0:	f000 fa72 	bl	8002d88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2140      	movs	r1, #64	; 0x40
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 facb 	bl	8002e46 <TIM_ITRx_SetConfig>
      break;
 80028b0:	e00c      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f000 fac2 	bl	8002e46 <TIM_ITRx_SetConfig>
      break;
 80028c2:	e003      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
      break;
 80028c8:	e000      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a40      	ldr	r2, [pc, #256]	; (80029fc <TIM_Base_SetConfig+0x114>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <TIM_Base_SetConfig+0x40>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002906:	d00f      	beq.n	8002928 <TIM_Base_SetConfig+0x40>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a3d      	ldr	r2, [pc, #244]	; (8002a00 <TIM_Base_SetConfig+0x118>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00b      	beq.n	8002928 <TIM_Base_SetConfig+0x40>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a3c      	ldr	r2, [pc, #240]	; (8002a04 <TIM_Base_SetConfig+0x11c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <TIM_Base_SetConfig+0x40>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a3b      	ldr	r2, [pc, #236]	; (8002a08 <TIM_Base_SetConfig+0x120>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_Base_SetConfig+0x40>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3a      	ldr	r2, [pc, #232]	; (8002a0c <TIM_Base_SetConfig+0x124>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d108      	bne.n	800293a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a2f      	ldr	r2, [pc, #188]	; (80029fc <TIM_Base_SetConfig+0x114>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d02b      	beq.n	800299a <TIM_Base_SetConfig+0xb2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002948:	d027      	beq.n	800299a <TIM_Base_SetConfig+0xb2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <TIM_Base_SetConfig+0x118>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d023      	beq.n	800299a <TIM_Base_SetConfig+0xb2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a2b      	ldr	r2, [pc, #172]	; (8002a04 <TIM_Base_SetConfig+0x11c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01f      	beq.n	800299a <TIM_Base_SetConfig+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <TIM_Base_SetConfig+0x120>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d01b      	beq.n	800299a <TIM_Base_SetConfig+0xb2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a29      	ldr	r2, [pc, #164]	; (8002a0c <TIM_Base_SetConfig+0x124>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d017      	beq.n	800299a <TIM_Base_SetConfig+0xb2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a28      	ldr	r2, [pc, #160]	; (8002a10 <TIM_Base_SetConfig+0x128>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d013      	beq.n	800299a <TIM_Base_SetConfig+0xb2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <TIM_Base_SetConfig+0x12c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00f      	beq.n	800299a <TIM_Base_SetConfig+0xb2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <TIM_Base_SetConfig+0x130>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00b      	beq.n	800299a <TIM_Base_SetConfig+0xb2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <TIM_Base_SetConfig+0x134>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <TIM_Base_SetConfig+0xb2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <TIM_Base_SetConfig+0x138>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d003      	beq.n	800299a <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <TIM_Base_SetConfig+0x13c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d108      	bne.n	80029ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <TIM_Base_SetConfig+0x114>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d003      	beq.n	80029e0 <TIM_Base_SetConfig+0xf8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a0c      	ldr	r2, [pc, #48]	; (8002a0c <TIM_Base_SetConfig+0x124>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d103      	bne.n	80029e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	615a      	str	r2, [r3, #20]
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40010000 	.word	0x40010000
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800
 8002a08:	40000c00 	.word	0x40000c00
 8002a0c:	40010400 	.word	0x40010400
 8002a10:	40014000 	.word	0x40014000
 8002a14:	40014400 	.word	0x40014400
 8002a18:	40014800 	.word	0x40014800
 8002a1c:	40001800 	.word	0x40001800
 8002a20:	40001c00 	.word	0x40001c00
 8002a24:	40002000 	.word	0x40002000

08002a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f023 0201 	bic.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f023 0302 	bic.w	r3, r3, #2
 8002a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a20      	ldr	r2, [pc, #128]	; (8002b00 <TIM_OC1_SetConfig+0xd8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d003      	beq.n	8002a8c <TIM_OC1_SetConfig+0x64>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <TIM_OC1_SetConfig+0xdc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d10c      	bne.n	8002aa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f023 0308 	bic.w	r3, r3, #8
 8002a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f023 0304 	bic.w	r3, r3, #4
 8002aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <TIM_OC1_SetConfig+0xd8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d003      	beq.n	8002ab6 <TIM_OC1_SetConfig+0x8e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a14      	ldr	r2, [pc, #80]	; (8002b04 <TIM_OC1_SetConfig+0xdc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d111      	bne.n	8002ada <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	621a      	str	r2, [r3, #32]
}
 8002af4:	bf00      	nop
 8002af6:	371c      	adds	r7, #28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40010000 	.word	0x40010000
 8002b04:	40010400 	.word	0x40010400

08002b08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0210 	bic.w	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f023 0320 	bic.w	r3, r3, #32
 8002b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a22      	ldr	r2, [pc, #136]	; (8002bec <TIM_OC2_SetConfig+0xe4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d003      	beq.n	8002b70 <TIM_OC2_SetConfig+0x68>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <TIM_OC2_SetConfig+0xe8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d10d      	bne.n	8002b8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a17      	ldr	r2, [pc, #92]	; (8002bec <TIM_OC2_SetConfig+0xe4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <TIM_OC2_SetConfig+0x94>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a16      	ldr	r2, [pc, #88]	; (8002bf0 <TIM_OC2_SetConfig+0xe8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d113      	bne.n	8002bc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	621a      	str	r2, [r3, #32]
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40010000 	.word	0x40010000
 8002bf0:	40010400 	.word	0x40010400

08002bf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <TIM_OC3_SetConfig+0xe0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d003      	beq.n	8002c5a <TIM_OC3_SetConfig+0x66>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <TIM_OC3_SetConfig+0xe4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10d      	bne.n	8002c76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <TIM_OC3_SetConfig+0xe0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <TIM_OC3_SetConfig+0x92>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a15      	ldr	r2, [pc, #84]	; (8002cd8 <TIM_OC3_SetConfig+0xe4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d113      	bne.n	8002cae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	621a      	str	r2, [r3, #32]
}
 8002cc8:	bf00      	nop
 8002cca:	371c      	adds	r7, #28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	40010400 	.word	0x40010400

08002cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	031b      	lsls	r3, r3, #12
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <TIM_OC4_SetConfig+0xa4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <TIM_OC4_SetConfig+0x68>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <TIM_OC4_SetConfig+0xa8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d109      	bne.n	8002d58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	019b      	lsls	r3, r3, #6
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40010000 	.word	0x40010000
 8002d84:	40010400 	.word	0x40010400

08002d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0201 	bic.w	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f023 030a 	bic.w	r3, r3, #10
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	621a      	str	r2, [r3, #32]
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b087      	sub	sp, #28
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f023 0210 	bic.w	r2, r3, #16
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	031b      	lsls	r3, r3, #12
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	621a      	str	r2, [r3, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f043 0307 	orr.w	r3, r3, #7
 8002e68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	021a      	lsls	r2, r3, #8
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	609a      	str	r2, [r3, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e05a      	b.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a21      	ldr	r2, [pc, #132]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d01d      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d018      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a17      	ldr	r2, [pc, #92]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d10c      	bne.n	8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800
 8002fa4:	40000c00 	.word	0x40000c00
 8002fa8:	40010400 	.word	0x40010400
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	40001800 	.word	0x40001800

08002fb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e03d      	b.n	800304c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e03f      	b.n	80030ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd ff02 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2224      	movs	r2, #36	; 0x24
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800309a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f829 	bl	80030f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f8:	b0c0      	sub	sp, #256	; 0x100
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	68d9      	ldr	r1, [r3, #12]
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	ea40 0301 	orr.w	r3, r0, r1
 800311c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	431a      	orrs	r2, r3
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	431a      	orrs	r2, r3
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800314c:	f021 010c 	bic.w	r1, r1, #12
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800315a:	430b      	orrs	r3, r1
 800315c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316e:	6999      	ldr	r1, [r3, #24]
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	ea40 0301 	orr.w	r3, r0, r1
 800317a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b8f      	ldr	r3, [pc, #572]	; (80033c0 <UART_SetConfig+0x2cc>)
 8003184:	429a      	cmp	r2, r3
 8003186:	d005      	beq.n	8003194 <UART_SetConfig+0xa0>
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b8d      	ldr	r3, [pc, #564]	; (80033c4 <UART_SetConfig+0x2d0>)
 8003190:	429a      	cmp	r2, r3
 8003192:	d104      	bne.n	800319e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003194:	f7fe fe54 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 8003198:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800319c:	e003      	b.n	80031a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800319e:	f7fe fe3b 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 80031a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b0:	f040 810c 	bne.w	80033cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031c6:	4622      	mov	r2, r4
 80031c8:	462b      	mov	r3, r5
 80031ca:	1891      	adds	r1, r2, r2
 80031cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80031ce:	415b      	adcs	r3, r3
 80031d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031d6:	4621      	mov	r1, r4
 80031d8:	eb12 0801 	adds.w	r8, r2, r1
 80031dc:	4629      	mov	r1, r5
 80031de:	eb43 0901 	adc.w	r9, r3, r1
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031f6:	4690      	mov	r8, r2
 80031f8:	4699      	mov	r9, r3
 80031fa:	4623      	mov	r3, r4
 80031fc:	eb18 0303 	adds.w	r3, r8, r3
 8003200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003204:	462b      	mov	r3, r5
 8003206:	eb49 0303 	adc.w	r3, r9, r3
 800320a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800321a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800321e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003222:	460b      	mov	r3, r1
 8003224:	18db      	adds	r3, r3, r3
 8003226:	653b      	str	r3, [r7, #80]	; 0x50
 8003228:	4613      	mov	r3, r2
 800322a:	eb42 0303 	adc.w	r3, r2, r3
 800322e:	657b      	str	r3, [r7, #84]	; 0x54
 8003230:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003234:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003238:	f7fc ffdc 	bl	80001f4 <__aeabi_uldivmod>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4b61      	ldr	r3, [pc, #388]	; (80033c8 <UART_SetConfig+0x2d4>)
 8003242:	fba3 2302 	umull	r2, r3, r3, r2
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	011c      	lsls	r4, r3, #4
 800324a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800324e:	2200      	movs	r2, #0
 8003250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003254:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003258:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800325c:	4642      	mov	r2, r8
 800325e:	464b      	mov	r3, r9
 8003260:	1891      	adds	r1, r2, r2
 8003262:	64b9      	str	r1, [r7, #72]	; 0x48
 8003264:	415b      	adcs	r3, r3
 8003266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003268:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800326c:	4641      	mov	r1, r8
 800326e:	eb12 0a01 	adds.w	sl, r2, r1
 8003272:	4649      	mov	r1, r9
 8003274:	eb43 0b01 	adc.w	fp, r3, r1
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003284:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003288:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800328c:	4692      	mov	sl, r2
 800328e:	469b      	mov	fp, r3
 8003290:	4643      	mov	r3, r8
 8003292:	eb1a 0303 	adds.w	r3, sl, r3
 8003296:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800329a:	464b      	mov	r3, r9
 800329c:	eb4b 0303 	adc.w	r3, fp, r3
 80032a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032b8:	460b      	mov	r3, r1
 80032ba:	18db      	adds	r3, r3, r3
 80032bc:	643b      	str	r3, [r7, #64]	; 0x40
 80032be:	4613      	mov	r3, r2
 80032c0:	eb42 0303 	adc.w	r3, r2, r3
 80032c4:	647b      	str	r3, [r7, #68]	; 0x44
 80032c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032ce:	f7fc ff91 	bl	80001f4 <__aeabi_uldivmod>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4611      	mov	r1, r2
 80032d8:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <UART_SetConfig+0x2d4>)
 80032da:	fba3 2301 	umull	r2, r3, r3, r1
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2264      	movs	r2, #100	; 0x64
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	1acb      	subs	r3, r1, r3
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032ee:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <UART_SetConfig+0x2d4>)
 80032f0:	fba3 2302 	umull	r2, r3, r3, r2
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032fc:	441c      	add	r4, r3
 80032fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003302:	2200      	movs	r2, #0
 8003304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003308:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800330c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003310:	4642      	mov	r2, r8
 8003312:	464b      	mov	r3, r9
 8003314:	1891      	adds	r1, r2, r2
 8003316:	63b9      	str	r1, [r7, #56]	; 0x38
 8003318:	415b      	adcs	r3, r3
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800331c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003320:	4641      	mov	r1, r8
 8003322:	1851      	adds	r1, r2, r1
 8003324:	6339      	str	r1, [r7, #48]	; 0x30
 8003326:	4649      	mov	r1, r9
 8003328:	414b      	adcs	r3, r1
 800332a:	637b      	str	r3, [r7, #52]	; 0x34
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003338:	4659      	mov	r1, fp
 800333a:	00cb      	lsls	r3, r1, #3
 800333c:	4651      	mov	r1, sl
 800333e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003342:	4651      	mov	r1, sl
 8003344:	00ca      	lsls	r2, r1, #3
 8003346:	4610      	mov	r0, r2
 8003348:	4619      	mov	r1, r3
 800334a:	4603      	mov	r3, r0
 800334c:	4642      	mov	r2, r8
 800334e:	189b      	adds	r3, r3, r2
 8003350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003354:	464b      	mov	r3, r9
 8003356:	460a      	mov	r2, r1
 8003358:	eb42 0303 	adc.w	r3, r2, r3
 800335c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800336c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003370:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003374:	460b      	mov	r3, r1
 8003376:	18db      	adds	r3, r3, r3
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
 800337a:	4613      	mov	r3, r2
 800337c:	eb42 0303 	adc.w	r3, r2, r3
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003386:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800338a:	f7fc ff33 	bl	80001f4 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <UART_SetConfig+0x2d4>)
 8003394:	fba3 1302 	umull	r1, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	2164      	movs	r1, #100	; 0x64
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	3332      	adds	r3, #50	; 0x32
 80033a6:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <UART_SetConfig+0x2d4>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	f003 0207 	and.w	r2, r3, #7
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4422      	add	r2, r4
 80033ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033bc:	e105      	b.n	80035ca <UART_SetConfig+0x4d6>
 80033be:	bf00      	nop
 80033c0:	40011000 	.word	0x40011000
 80033c4:	40011400 	.word	0x40011400
 80033c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033de:	4642      	mov	r2, r8
 80033e0:	464b      	mov	r3, r9
 80033e2:	1891      	adds	r1, r2, r2
 80033e4:	6239      	str	r1, [r7, #32]
 80033e6:	415b      	adcs	r3, r3
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033ee:	4641      	mov	r1, r8
 80033f0:	1854      	adds	r4, r2, r1
 80033f2:	4649      	mov	r1, r9
 80033f4:	eb43 0501 	adc.w	r5, r3, r1
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	00eb      	lsls	r3, r5, #3
 8003402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003406:	00e2      	lsls	r2, r4, #3
 8003408:	4614      	mov	r4, r2
 800340a:	461d      	mov	r5, r3
 800340c:	4643      	mov	r3, r8
 800340e:	18e3      	adds	r3, r4, r3
 8003410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003414:	464b      	mov	r3, r9
 8003416:	eb45 0303 	adc.w	r3, r5, r3
 800341a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800342a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800343a:	4629      	mov	r1, r5
 800343c:	008b      	lsls	r3, r1, #2
 800343e:	4621      	mov	r1, r4
 8003440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003444:	4621      	mov	r1, r4
 8003446:	008a      	lsls	r2, r1, #2
 8003448:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800344c:	f7fc fed2 	bl	80001f4 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4b60      	ldr	r3, [pc, #384]	; (80035d8 <UART_SetConfig+0x4e4>)
 8003456:	fba3 2302 	umull	r2, r3, r3, r2
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	011c      	lsls	r4, r3, #4
 800345e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003462:	2200      	movs	r2, #0
 8003464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003468:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800346c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003470:	4642      	mov	r2, r8
 8003472:	464b      	mov	r3, r9
 8003474:	1891      	adds	r1, r2, r2
 8003476:	61b9      	str	r1, [r7, #24]
 8003478:	415b      	adcs	r3, r3
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003480:	4641      	mov	r1, r8
 8003482:	1851      	adds	r1, r2, r1
 8003484:	6139      	str	r1, [r7, #16]
 8003486:	4649      	mov	r1, r9
 8003488:	414b      	adcs	r3, r1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003498:	4659      	mov	r1, fp
 800349a:	00cb      	lsls	r3, r1, #3
 800349c:	4651      	mov	r1, sl
 800349e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034a2:	4651      	mov	r1, sl
 80034a4:	00ca      	lsls	r2, r1, #3
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	4642      	mov	r2, r8
 80034ae:	189b      	adds	r3, r3, r2
 80034b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034b4:	464b      	mov	r3, r9
 80034b6:	460a      	mov	r2, r1
 80034b8:	eb42 0303 	adc.w	r3, r2, r3
 80034bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80034ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034d8:	4649      	mov	r1, r9
 80034da:	008b      	lsls	r3, r1, #2
 80034dc:	4641      	mov	r1, r8
 80034de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034e2:	4641      	mov	r1, r8
 80034e4:	008a      	lsls	r2, r1, #2
 80034e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034ea:	f7fc fe83 	bl	80001f4 <__aeabi_uldivmod>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <UART_SetConfig+0x4e4>)
 80034f4:	fba3 1302 	umull	r1, r3, r3, r2
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	2164      	movs	r1, #100	; 0x64
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	3332      	adds	r3, #50	; 0x32
 8003506:	4a34      	ldr	r2, [pc, #208]	; (80035d8 <UART_SetConfig+0x4e4>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	095b      	lsrs	r3, r3, #5
 800350e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003512:	441c      	add	r4, r3
 8003514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003518:	2200      	movs	r2, #0
 800351a:	673b      	str	r3, [r7, #112]	; 0x70
 800351c:	677a      	str	r2, [r7, #116]	; 0x74
 800351e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003522:	4642      	mov	r2, r8
 8003524:	464b      	mov	r3, r9
 8003526:	1891      	adds	r1, r2, r2
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	415b      	adcs	r3, r3
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003532:	4641      	mov	r1, r8
 8003534:	1851      	adds	r1, r2, r1
 8003536:	6039      	str	r1, [r7, #0]
 8003538:	4649      	mov	r1, r9
 800353a:	414b      	adcs	r3, r1
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800354a:	4659      	mov	r1, fp
 800354c:	00cb      	lsls	r3, r1, #3
 800354e:	4651      	mov	r1, sl
 8003550:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003554:	4651      	mov	r1, sl
 8003556:	00ca      	lsls	r2, r1, #3
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	4603      	mov	r3, r0
 800355e:	4642      	mov	r2, r8
 8003560:	189b      	adds	r3, r3, r2
 8003562:	66bb      	str	r3, [r7, #104]	; 0x68
 8003564:	464b      	mov	r3, r9
 8003566:	460a      	mov	r2, r1
 8003568:	eb42 0303 	adc.w	r3, r2, r3
 800356c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800356e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	663b      	str	r3, [r7, #96]	; 0x60
 8003578:	667a      	str	r2, [r7, #100]	; 0x64
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003586:	4649      	mov	r1, r9
 8003588:	008b      	lsls	r3, r1, #2
 800358a:	4641      	mov	r1, r8
 800358c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003590:	4641      	mov	r1, r8
 8003592:	008a      	lsls	r2, r1, #2
 8003594:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003598:	f7fc fe2c 	bl	80001f4 <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <UART_SetConfig+0x4e4>)
 80035a2:	fba3 1302 	umull	r1, r3, r3, r2
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2164      	movs	r1, #100	; 0x64
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	3332      	adds	r3, #50	; 0x32
 80035b4:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <UART_SetConfig+0x4e4>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	f003 020f 	and.w	r2, r3, #15
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4422      	add	r2, r4
 80035c8:	609a      	str	r2, [r3, #8]
}
 80035ca:	bf00      	nop
 80035cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035d0:	46bd      	mov	sp, r7
 80035d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d6:	bf00      	nop
 80035d8:	51eb851f 	.word	0x51eb851f

080035dc <__libc_init_array>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	4d0d      	ldr	r5, [pc, #52]	; (8003614 <__libc_init_array+0x38>)
 80035e0:	4c0d      	ldr	r4, [pc, #52]	; (8003618 <__libc_init_array+0x3c>)
 80035e2:	1b64      	subs	r4, r4, r5
 80035e4:	10a4      	asrs	r4, r4, #2
 80035e6:	2600      	movs	r6, #0
 80035e8:	42a6      	cmp	r6, r4
 80035ea:	d109      	bne.n	8003600 <__libc_init_array+0x24>
 80035ec:	4d0b      	ldr	r5, [pc, #44]	; (800361c <__libc_init_array+0x40>)
 80035ee:	4c0c      	ldr	r4, [pc, #48]	; (8003620 <__libc_init_array+0x44>)
 80035f0:	f000 f820 	bl	8003634 <_init>
 80035f4:	1b64      	subs	r4, r4, r5
 80035f6:	10a4      	asrs	r4, r4, #2
 80035f8:	2600      	movs	r6, #0
 80035fa:	42a6      	cmp	r6, r4
 80035fc:	d105      	bne.n	800360a <__libc_init_array+0x2e>
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	f855 3b04 	ldr.w	r3, [r5], #4
 8003604:	4798      	blx	r3
 8003606:	3601      	adds	r6, #1
 8003608:	e7ee      	b.n	80035e8 <__libc_init_array+0xc>
 800360a:	f855 3b04 	ldr.w	r3, [r5], #4
 800360e:	4798      	blx	r3
 8003610:	3601      	adds	r6, #1
 8003612:	e7f2      	b.n	80035fa <__libc_init_array+0x1e>
 8003614:	0800366c 	.word	0x0800366c
 8003618:	0800366c 	.word	0x0800366c
 800361c:	0800366c 	.word	0x0800366c
 8003620:	08003670 	.word	0x08003670

08003624 <memset>:
 8003624:	4402      	add	r2, r0
 8003626:	4603      	mov	r3, r0
 8003628:	4293      	cmp	r3, r2
 800362a:	d100      	bne.n	800362e <memset+0xa>
 800362c:	4770      	bx	lr
 800362e:	f803 1b01 	strb.w	r1, [r3], #1
 8003632:	e7f9      	b.n	8003628 <memset+0x4>

08003634 <_init>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	bf00      	nop
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr

08003640 <_fini>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	bf00      	nop
 8003644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	469e      	mov	lr, r3
 800364a:	4770      	bx	lr

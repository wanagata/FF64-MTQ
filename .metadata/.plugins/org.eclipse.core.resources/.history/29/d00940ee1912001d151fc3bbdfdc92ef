/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stdio.h"
#include "stm32newfnc/i2cscan.h"
#include "stm32newfnc/newuart.h"
#include "stm32newfnc/newi2c.h"
#include "stm32newfnc/newpwm.h"
#include "driver/newpcf8574.h"
#include "driver/mpu6050.h"
#include "driver/newINA219.h"
#include "driver/newMTQ.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#define BAUDRATE 115200
/* USER CODE END Includes */
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
MPU6050_t MPU6050;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */
#define MTQx_ENA_PIN 2
#define MTQy_ENA_PIN 4
#define MTQz_ENA_PIN 6
#define MTQx_DIR_PIN 3
#define MTQy_DIR_PIN 5
#define MTQz_DIR_PIN 7
#define pcf8574_addr (0x27 << 1)
// xyz
enum
{
  x = 0,
  y = 1,
  z = 2
};
uint8_t cur_addr[3] = {0x41 << 1, 0x45 << 1, 0x40 << 1};
/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
NEWUART Serial3(USART3, 10, 115200);
NEWI2C I2C1BUS(I2C1, 100);
NEWI2C I2C2BUS(I2C2, 100);
NEWPWM PWMTIM1(TIM1);
newpcf8574 pcf8574(&I2C1BUS, pcf8574_addr);

newINA219 curSenX(&I2C1BUS, cur_addr[x]);
newINA219 curSenY(&I2C1BUS, cur_addr[y]);
newINA219 curSenZ(&I2C1BUS, cur_addr[z]);

NEWMTQ MTQx(&pcf8574, &curSenX, &PWMTIM1);
NEWMTQ MTQy(&pcf8574, &curSenY, &PWMTIM1);
NEWMTQ MTQz(&pcf8574, &curSenZ, &PWMTIM1);
NEWMTQ MTQ[3] = {MTQx, MTQy, MTQz};
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
// I2C_HandleTypeDef hi2c1;
// I2C_HandleTypeDef hi2c2;
// I2C_HandleTypeDef hi2c3;

SPI_HandleTypeDef hspi1;

// TIM_HandleTypeDef htim1;

// UART_HandleTypeDef huart4;
// UART_HandleTypeDef huart5;
// UART_HandleTypeDef huart7;
// UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
// static void MX_I2C1_Init(void);
// static void MX_I2C2_Init(void);
// static void MX_I2C3_Init(void);
// static void MX_TIM1_Init(void);

static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void printCur(NEWUART *Serial, NEWMTQ *MTQ, float *sumw);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  // MX_I2C1_Init();
  // MX_I2C2_Init();
  // MX_I2C3_Init();
  // MX_TIM1_Init();
  MX_SPI1_Init();

  Serial3.begin(115200);
  I2C1BUS.begin();
  I2C2BUS.begin();
  MTQ[z].begin(MTQz_DIR_PIN, MTQz_ENA_PIN, TIM_CHANNEL_3, 255);
  MTQ[y].begin(MTQy_DIR_PIN, MTQy_ENA_PIN, TIM_CHANNEL_2, 255);
  MTQ[x].begin(MTQx_DIR_PIN, MTQx_ENA_PIN, TIM_CHANNEL_1, 255);
  MTQ[z].run_pwm(20);
  Serial3.println("EnablePower");

  i2cscanner(I2C2BUS.getHandleTypeDef(), Serial3.getHandleTypeDef());
  while (MPU6050_Init(I2C2BUS.getHandleTypeDef()))
  {
    Serial3.println("Error");
    HAL_Delay(100);
  }

  while (1)
  {
    float allload = 0.0f;
    Serial3.print("X");
    printCur(&Serial3, &MTQ[x], &allload);
    Serial3.print("Y");
    printCur(&Serial3, &MTQ[y], &allload);
    Serial3.print("Z");
    printCur(&Serial3, &MTQ[z], &allload);
    Serial3.print("Sum :");
    Serial3.printF(allload);
    Serial3.println("******************************************");
    MPU6050_Read_All(I2C2BUS.getHandleTypeDef(), &MPU6050);
    Serial3.printF(MPU6050.KalmanAngleX);
    Serial3.println("");
    HAL_Delay(100);
  }
  /* USER CODE END 3 */
}
void printCur(NEWUART *Serial, NEWMTQ *MTQ, float *sumw)
{
  float mA = MTQ->read_mA();
  Serial->print("mA:");
  Serial->printF(MTQ->read_mA());
  Serial->println("");
  *sumw += mA;
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 90;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}

static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
